{"version":3,"sources":["commons/components/Navbar.js","commons/components/Loading.js","contacts/components/ContactItem.js","contacts/components/ContactList.js","contacts/components/Search.js","commons/components/App.js","services/api.js","serviceWorker.js","index.js"],"names":["Navbar","id","className","Component","ContactItem","this","props","contact","profile_image","name","company_name","email","icon","job","phone","profilePictureStyle","backgroundImage","iconStyle","style","ContactList","contacts","map","key","Search","state","isInputVisible","handleButtonClick","setState","searchQuery","handleSearchQueryChange","type","placeholder","onChange","value","onClick","alt","src","App","filteredContacts","debouncedFilterContacts","debounce","filter","toLowerCase","includes","e","target","fetch","then","res","json","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.22906993.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\nexport default class Navbar extends Component {\n  render() {\n    return (\n      <div id=\"navbar-container\">\n        <div className=\"app-logo\">Honeybook Contacts</div>\n      </div>\n    )\n  }\n}\n","import React from 'react'\n\nimport './Loading.scss'\n\nexport default () => {\n  return (\n    <div id=\"loading-container\">\n      <span>Loading</span>\n      <span className=\"point\">.</span>\n      <span className=\"point\">.</span>\n      <span className=\"point\">.</span>\n    </div>\n  )\n}\n","import React, {Component} from 'react'\n\nexport default class ContactItem extends Component {\n  render() {\n    const {\n      contact: {\n        profile_image,\n        name,\n        company_name,\n        email,\n        icon,\n        job,\n        phone\n      }\n    } = this.props\n\n    const profilePictureStyle = {backgroundImage: `url(${profile_image})`}\n    const iconStyle = {backgroundImage: `url(${icon})`}\n\n    return (\n      <div className=\"contact-item-container\">\n        <div className=\"profile-picture\" style={profilePictureStyle}></div>\n        <div className=\"details\">\n          <div className=\"icon\" style={iconStyle}></div>\n          <div className=\"fullname\">{name}</div>\n          <div className=\"job-details\">\n            <div className=\"job-title\">{job}</div>\n            {job && company_name && <div className=\"separator\"></div>}\n            <div className=\"company-name\">@{company_name}</div>\n          </div>\n\n          <div className=\"more-details\">\n            <div className=\"phone\">Phone number: {phone}</div>\n            <div className=\"email\">{email}</div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n","import React, {Component} from 'react'\n\nimport ContactItem from './ContactItem'\nimport './ContactList.scss'\n\nexport default class ContactList extends Component {\n  render() {\n    const {contacts} = this.props\n\n    return (\n      <div id=\"contacts-list-container\">\n        {contacts.map((contact) => {\n          return <ContactItem key={contact.email} contact={contact} />\n        })}\n      </div>\n    )\n  }\n}\n","import React, {Component} from 'react'\n\nimport './Search.scss'\n\nexport default class Search extends Component {\n  state = {\n    isInputVisible: false\n  }\n\n  handleButtonClick = () => {\n    const {isInputVisible} = this.state\n\n    this.setState({isInputVisible: !isInputVisible})\n  }\n\n  render() {\n    const {searchQuery, handleSearchQueryChange} = this.props\n    const {isInputVisible} = this.state\n\n    return (\n      <div id=\"search-container\">\n        <div className={`input-container ${isInputVisible && 'visible'}`}>\n          <input\n            type=\"text\"\n            placeholder=\"Enter your search\"\n            onChange={handleSearchQueryChange}\n            value={searchQuery}\n          />\n        </div>\n        <div className=\"search-button\" onClick={this.handleButtonClick}>\n          <img className=\"icon\" alt=\"\" src=\"search-icon.svg\" />\n        </div>\n      </div>\n    )\n  }\n}\n","import React, {Component} from 'react'\nimport {debounce} from 'lodash'\n\nimport Navbar from './Navbar'\nimport Loading from './Loading'\nimport ContactList from '../../contacts/components/ContactList'\nimport Search from '../../contacts/components/Search'\nimport {fetchContacts} from '../../services/api'\nimport './App.scss'\n\nclass App extends Component {\n  state = {\n    filteredContacts: null,\n    searchQuery: ''\n  }\n\n  componentDidMount() {\n    // NOTICE: This info should be saved on a reducer and fetched using an action.\n    // The reason we are not using Redux and Thunk is becouse it is a small project,\n    // And for now it is out of scope.\n    fetchContacts().then((contacts) => {\n      this.contacts = contacts\n      this.setState({filteredContacts: contacts})\n    })\n  }\n\n  debouncedFilterContacts = debounce((value) => {\n    const filteredContacts = this.contacts.filter(contact => contact.name.toLowerCase().includes(value.toLowerCase()))\n\n    this.setState({filteredContacts})\n  }, 500)\n\n  handleSearchQueryChange = (e) => {\n    const {target: {value}} = e\n\n    this.setState({searchQuery: value})\n    this.debouncedFilterContacts(value)\n  }\n\n  render() {\n    const {filteredContacts, searchQuery} = this.state\n\n    return (\n      <div className=\"App\">\n        <Navbar />\n        {filteredContacts ?\n          <ContactList contacts={filteredContacts} />\n          :\n          <Loading />\n        }\n        <Search\n          searchQuery={searchQuery}\n          handleSearchQueryChange={this.handleSearchQueryChange}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export const fetchContacts = () => {\n  return fetch('https://candidate-test.herokuapp.com/contacts')\n           .then((res) => res.json())\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './commons/components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}